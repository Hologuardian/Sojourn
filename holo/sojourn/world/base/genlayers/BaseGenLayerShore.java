package holo.sojourn.world.base.genlayers;

import java.util.HashMap;
import java.util.Map;

import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class BaseGenLayerShore extends GenLayer
{
    public HashMap<Integer, HashMap<Integer, Integer>> subBiomes;
    public BaseGenLayerShore(long par1, GenLayer par3GenLayer, Map<BiomeGenBase, Map<BiomeGenBase, BiomeGenBase>> transitionBiomes)
    {
        super(par1);
        this.parent = par3GenLayer;
        subBiomes = new HashMap<Integer, HashMap<Integer, Integer>>();
        
        for (BiomeGenBase biome : transitionBiomes.keySet())
        {
            HashMap<Integer, Integer> biomes = new HashMap<Integer, Integer>();
            for (BiomeGenBase biome1 : transitionBiomes.get(biome).keySet())
            {
                biomes.put(biome1.biomeID, transitionBiomes.get(biome).get(biome1).biomeID);
            }
            subBiomes.put(biome.biomeID, biomes);
        }
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int[] aint = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par4; ++i1)
        {
            for (int j1 = 0; j1 < par3; ++j1)
            {
                this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                int k1 = aint[j1 + 1 + (i1 + 1) * (par3 + 2)];
                int l1;
                int i2;
                int j2;
                int k2;

                if (subBiomes.containsKey(k1))
                {
                    l1 = aint[j1 + 1 + (i1 + 1 - 1) * (par3 + 2)];
                    i2 = aint[j1 + 1 + 1 + (i1 + 1) * (par3 + 2)];
                    j2 = aint[j1 + 1 - 1 + (i1 + 1) * (par3 + 2)];
                    k2 = aint[j1 + 1 + (i1 + 1 + 1) * (par3 + 2)];
                    Map<Integer, Integer> biomes = subBiomes.get(k1);
                    if (!biomes.containsKey(l1) && !biomes.containsKey(i2) && !biomes.containsKey(j2) && !biomes.containsKey(k2))
                    {
                        aint1[j1 + i1 * par3] = k1;
                    }
                    else
                    {
                        if (biomes.containsKey(l1))
                            aint1[j1 + i1 * par3] = biomes.get(l1);
                        else if (biomes.containsKey(i2))
                            aint1[j1 + i1 * par3] = biomes.get(i2);
                        else if (biomes.containsKey(j2))
                            aint1[j1 + i1 * par3] = biomes.get(j2);
                        else if (biomes.containsKey(k2))
                            aint1[j1 + i1 * par3] = biomes.get(k2);
                    }
                }
                else
                {
                    aint1[j1 + i1 * par3] = k1;
                }
            }
        }

        return aint1;
    }
}
